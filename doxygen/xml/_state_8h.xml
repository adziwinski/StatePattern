<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_state_8h" kind="file" language="C++">
    <compoundname>State.h</compoundname>
    <includes local="no">string</includes>
    <includedby refid="_freezing_state_8h" local="yes">D:/git/StatePattern/StatePattern/include/FreezingState.h</includedby>
    <includedby refid="_state_machine_8h" local="yes">D:/git/StatePattern/StatePattern/include/StateMachine.h</includedby>
    <includedby refid="_idle_state_8h" local="yes">D:/git/StatePattern/StatePattern/include/IdleState.h</includedby>
    <includedby refid="_settings_state_8h" local="yes">D:/git/StatePattern/StatePattern/include/SettingsState.h</includedby>
    <includedby refid="_ready_state_8h" local="yes">D:/git/StatePattern/StatePattern/include/ReadyState.h</includedby>
    <includedby refid="_standby_state_8h" local="yes">D:/git/StatePattern/StatePattern/include/StandbyState.h</includedby>
    <includedby refid="_state_8cpp" local="yes">D:/git/StatePattern/StatePattern/src/State.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>D:/git/StatePattern/StatePattern/include/State.h</label>
        <link refid="_state_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>D:/git/StatePattern/StatePattern/include/FreezingState.h</label>
        <link refid="_freezing_state_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>D:/git/StatePattern/StatePattern/include/State.h</label>
        <link refid="_state_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>D:/git/StatePattern/StatePattern/include/StandbyState.h</label>
        <link refid="_standby_state_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>D:/git/StatePattern/StatePattern/include/ReadyState.h</label>
        <link refid="_ready_state_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>D:/git/StatePattern/StatePattern/include/SettingsState.h</label>
        <link refid="_settings_state_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>D:/git/StatePattern/StatePattern/include/StateMachine.h</label>
        <link refid="_state_machine_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>D:/git/StatePattern/StatePattern/include/IdleState.h</label>
        <link refid="_idle_state_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_state" prot="public">State</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>STATE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_state_machine" kindref="compound">StateMachine</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="class_state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_state" kindref="compound">State</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_state" kindref="compound">State</ref>(std::string);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_state" kindref="compound">State</ref>();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run(<ref refid="class_state_machine" kindref="compound">StateMachine</ref><sp/>*<sp/>stateMachine)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idle(<ref refid="class_state_machine" kindref="compound">StateMachine</ref><sp/>*<sp/>stateMachine);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>standby(<ref refid="class_state_machine" kindref="compound">StateMachine</ref><sp/>*<sp/>stateMachine);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>settings(<ref refid="class_state_machine" kindref="compound">StateMachine</ref><sp/>*<sp/>stateMachine);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ready(<ref refid="class_state_machine" kindref="compound">StateMachine</ref><sp/>*<sp/>stateMachine);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freezineg(<ref refid="class_state_machine" kindref="compound">StateMachine</ref><sp/>*<sp/>stateMachine);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getName()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_name;<sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_name;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>STATE_H</highlight></codeline>
    </programlisting>
    <location file="D:/git/StatePattern/StatePattern/include/State.h"/>
  </compounddef>
</doxygen>
